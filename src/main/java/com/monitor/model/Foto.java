package com.monitor.model;
// Generated 23/06/2017 12:40:03 PM by Hibernate Tools 5.2.3.Final

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Query;
import javax.persistence.Table;

import com.monitor.filter.FiltrosMonitor;

/**
 * Foto generated by hbm2java
 */
@Entity
@Table(name = "FOTO", schema = "MONITOR")
public class Foto extends Entidad {

	private FotoId id;
	private Sitio sitio;
	private Usuario usuario;
	private String fotoPath;
	private String comentario;
	private Double posicionGps;
	private Integer calificacion;
	private FiltrosMonitor filtrosMonitor;

	public Foto() {
	}

	public Foto(FotoId id, Sitio sitio, Usuario usuario) {
		this.id = id;
		this.sitio = sitio;
		this.usuario = usuario;
	}

	public Foto(FotoId id, Sitio sitio, Usuario usuario, String fotoPath, String comentario, Double posicionGps,
			Integer calificacion) {
		this.id = id;
		this.sitio = sitio;
		this.usuario = usuario;
		this.fotoPath = fotoPath;
		this.comentario = comentario;
		this.posicionGps = posicionGps;
		this.calificacion = calificacion;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "fechaHora", column = @Column(name = "FECHA_HORA", nullable = false, length = 7)),
			@AttributeOverride(name = "cveCampana", column = @Column(name = "CVE_CAMPANA", nullable = false, length = 12)),
			@AttributeOverride(name = "cveClipro", column = @Column(name = "CVE_CLIPRO", nullable = false, length = 10)),
			@AttributeOverride(name = "email", column = @Column(name = "EMAIL", nullable = false, length = 20)),
			@AttributeOverride(name = "cvePlaza", column = @Column(name = "CVE_PLAZA", nullable = false, length = 10)),
			@AttributeOverride(name = "cveSitio", column = @Column(name = "CVE_SITIO", nullable = false, length = 20)) })
	public FotoId getId() {
		return this.id;
	}

	public void setId(FotoId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "CVE_CAMPANA", referencedColumnName = "CVE_CAMPANA", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "CVE_CLIPRO", referencedColumnName = "CVE_CLIPRO", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "CVE_PLAZA", referencedColumnName = "CVE_PLAZA", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "CVE_SITIO", referencedColumnName = "CVE_SITIO", nullable = false, insertable = false, updatable = false) })
	public Sitio getSitio() {
		return this.sitio;
	}

	public void setSitio(Sitio sitio) {
		this.sitio = sitio;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMAIL", nullable = false, insertable = false, updatable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@Column(name = "FOTO_PATH", length = 100)
	public String getFotoPath() {
		return this.fotoPath;
	}

	public void setFotoPath(String fotoPath) {
		this.fotoPath = fotoPath;
	}

	@Column(name = "COMENTARIO", length = 100)
	public String getComentario() {
		return this.comentario;
	}

	public void setComentario(String comentario) {
		this.comentario = comentario;
	}

	@Column(name = "POSICION_GPS", precision = 126, scale = 0)
	public Double getPosicionGps() {
		return this.posicionGps;
	}

	public void setPosicionGps(Double posicionGps) {
		this.posicionGps = posicionGps;
	}

	@Column(name = "CALIFICACION", precision = 6, scale = 0)
	public Integer getCalificacion() {
		return this.calificacion;
	}

	public void setCalificacion(Integer calificacion) {
		this.calificacion = calificacion;
	}

	@Override
	public Query traerQuery(EntityManager entityManager) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
		Query q = null;

		switch (consulta) {

		case "obtenerFotosPorUsuario":

			q = obtenerFotosPorUsuario(entityManager);

			break;

		case "consultaTodos":

			// q = consultaTodos(entityManager);

			break;

		case "consultaPorId":

			q = consultaPorId(entityManager);

			break;

		default:
			break;
		}

		return q;
	}

	@Override
	public void copiaDatos(Entidad entidad) {
		// TODO Auto-generated method stub

	}

	@Override
	protected Query consultaPorId(EntityManager entityManager) {
		// TODO Auto-generated method stub
		return null;
	}

	public void obtenerFotosPorUsuario(FiltrosMonitor filtrosMonitor) {
		consulta = "obtenerFotosPorUsuario";
		this.filtrosMonitor=filtrosMonitor;

	}

	private Query obtenerFotosPorUsuario(EntityManager entityManager) {
		Query q = entityManager.createQuery("select f from Foto as f inner join Usuario as u on (f.id.email= u.email) where u.email=:email");
		q.setParameter("email", filtrosMonitor.getEmailUser());
		return q;
	}
}
